{
  "version": "1.0",
  "sections": {
    "attributes": {
      "required": true,
      "properties": {
        "ini_version": {
          "required": true,
          "type": "version",
          "pattern": "^\\d+\\.\\d+\\.\\d+$"
        }
      }
    },
    "inputs": {
      "required": true,
      "validation": "file_paths"
    },
    "outputs": {
      "required": true,
      "validation": "output_references"
    }
  },

  "node_types": {
    "inflow": {
      "description": "Inflow node with external data source",
      "allowed_outputs": ["dsflow", "inflow", "usflow", "ds_1"],
      "required_params": ["type", "loc"],
      "optional_params": ["inflow"],
      "dsnode_params": ["ds_1", "ds_2", "ds_3"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "inflow"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        },
        "inflow": {
          "type": "function_expression",
          "description": "Inflow input (data reference, constant, or expression)"
        }
      }
    },

    "gr4j": {
      "description": "GR4J rainfall-runoff model",
      "allowed_outputs": ["usflow", "runoff_volume", "runoff_depth", "dsflow", "ds_1"],
      "required_params": ["type", "loc", "area", "rain", "evap", "params"],
      "optional_params": [],
      "dsnode_params": ["ds_1", "ds_2", "ds_3"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "gr4j"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float"
        },
        "area": {
          "type": "number",
          "min": 0,
          "description": "Catchment area"
        },
        "rain": {
          "type": "function_expression",
          "description": "Rainfall input (data reference, constant, or expression)"
        },
        "evap": {
          "type": "function_expression",
          "description": "Evaporation input (data reference, constant, or expression)"
        },
        "params": {
          "type": "number_sequence",
          "count": 4,
          "description": "GR4J parameters: X1, X2, X3, X4"
        }
      }
    },

    "routing_node": {
      "description": "Routing node with optional lag parameter for flow delay",
      "allowed_outputs": ["dsflow", "usflow", "volume", "ds_1"],
      "required_params": ["type", "loc"],
      "optional_params": ["lag"],
      "dsnode_params": ["ds_1", "ds_2", "ds_3"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "routing_node"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        },
        "lag": {
          "type": "integer",
          "min": 0,
          "description": "Time lag in time steps (integer >= 0)"
        }
      }
    },

    "sacramento": {
      "description": "Sacramento rainfall-runoff model",
      "allowed_outputs": ["usflow", "runoff_volume", "runoff_depth", "dsflow", "ds_1"],
      "required_params": ["type", "loc", "area", "rain", "evap", "params"],
      "optional_params": [],
      "dsnode_params": ["ds_1"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "sacramento"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float"
        },
        "area": {
          "type": "number",
          "min": 0,
          "description": "Catchment area"
        },
        "rain": {
          "type": "function_expression",
          "description": "Rainfall input (data reference, constant, or expression)"
        },
        "evap": {
          "type": "function_expression",
          "description": "Evaporation input (data reference, constant, or expression)"
        },
        "params": {
          "type": "number_sequence",
          "count": 17,
          "description": "Sacramento model parameters (17 parameters)"
        }
      }
    },

    "user": {
      "description": "User node representing water demand",
      "allowed_outputs": ["dsflow", "usflow", "ds_1", "demand", "diversion", "flow_threshold", "pump_capacity", "demand_carryover"],
      "required_params": ["type", "loc"],
      "optional_params": ["demand", "pump", "flow_threshold", "annual_cap", "demand_carryover"],
      "dsnode_params": ["ds_1"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "user"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        },
        "demand": {
          "type": "function_expression",
          "description": "Water demand input (data reference, constant, or expression)"
        },
        "pump": {
          "type": "function_expression",
          "description": "Pump capacity (data reference, constant, or expression)"
        },
        "flow_threshold": {
          "type": "function_expression",
          "description": "Flow threshold (data reference, constant, or expression)"
        },
        "annual_cap": {
          "type": "number_sequence",
          "count": 2,
          "description": "Annual capacity limits (two comma-separated numbers)"
        },
        "demand_carryover": {
          "type": "string",
          "pattern": "^(?i)(true|false)(\\s*,\\s*([1-9]|1[0-2]))?$",
          "description": "Demand carryover: 'true'/'false', or 'true/false, N' where N is month 1-12 (case-insensitive)"
        }
      }
    },

    "storage": {
      "description": "Storage node for water storage modeling",
      "allowed_outputs": ["dsflow", "usflow", "volume", "ds_1", "ds_2"],
      "required_params": ["type", "loc"],
      "optional_params": ["dimensions", "dimensions_file", "rain", "evap", "seep", "pond_demand"],
      "dsnode_params": ["ds_1", "ds_2"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "storage"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        },
        "dimensions": {
          "type": "string",
          "description": "Storage dimensions (no validation on value)"
        },
        "dimensions_file": {
          "type": "string",
          "description": "File containing storage dimensions"
        },
        "rain": {
          "type": "function_expression",
          "description": "Rainfall input (data reference, constant, or expression)"
        },
        "evap": {
          "type": "function_expression",
          "description": "Evaporation input (data reference, constant, or expression)"
        },
        "seep": {
          "type": "function_expression",
          "description": "Seepage input (data reference, constant, or expression)"
        },
        "pond_demand": {
          "type": "function_expression",
          "description": "Storage demand input (data reference, constant, or expression)"
        }
      }
    },

    "blackhole": {
      "description": "Blackhole node that consumes flow without further routing",
      "allowed_outputs": ["usflow", "dsflow", "ds_1"],
      "required_params": ["type", "loc"],
      "optional_params": [],
      "dsnode_params": ["ds_1"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "blackhole"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        }
      }
    },

    "routing": {
      "description": "Routing node with advanced flow distribution capabilities",
      "allowed_outputs": ["usflow", "dsflow", "volume", "ds_1"],
      "required_params": ["type", "loc"],
      "optional_params": ["lag", "pwl", "n_divs", "x", "ds_1"],
      "dsnode_params": ["ds_1"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "routing"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        },
        "lag": {
          "type": "integer",
          "min": 0,
          "description": "Time lag in time steps (integer >= 0)"
        },
        "pwl": {
          "type": "string",
          "description": "Piecewise linear function specification"
        },
        "n_divs": {
          "type": "integer",
          "min": 1,
          "description": "Number of divisions (integer >= 1)"
        },
        "x": {
          "type": "number",
          "min": 0,
          "max": 1,
          "description": "Fraction parameter (real number from 0 to 1 inclusive)"
        },
        "ds_1": {
          "type": "downstream_reference",
          "description": "Downstream link to another node"
        }
      }
    },

    "confluence": {
      "description": "Confluence node that merges multiple flow streams",
      "allowed_outputs": ["usflow", "dsflow", "ds_1"],
      "required_params": ["type", "loc"],
      "optional_params": [],
      "dsnode_params": ["ds_1"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "confluence"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        }
      }
    },

    "loss": {
      "description": "Loss node for flow reduction modeling",
      "allowed_outputs": ["usflow", "dsflow", "ds_1", "loss"],
      "required_params": ["type", "loc"],
      "optional_params": ["table"],
      "dsnode_params": ["ds_1"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "loss"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        },
        "table": {
          "type": "number_sequence",
          "description": "Comma-separated numerical values"
        }
      }
    },

    "splitter": {
      "description": "Splitter node for dividing flow between two downstream paths",
      "allowed_outputs": ["usflow", "dsflow", "ds_1", "ds_2"],
      "required_params": ["type", "loc", "table"],
      "optional_params": [],
      "dsnode_params": ["ds_1", "ds_2"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "splitter"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        },
        "table": {
          "type": "number_sequence",
          "description": "Comma-separated numerical values"
        }
      }
    },

    "gauge": {
      "description": "Gauge node for monitoring and measuring flow",
      "allowed_outputs": ["usflow", "dsflow", "ds_1"],
      "required_params": ["type", "loc"],
      "optional_params": ["observed"],
      "dsnode_params": ["ds_1"],
      "parameters": {
        "type": {
          "type": "literal",
          "value": "gauge"
        },
        "loc": {
          "type": "coordinates",
          "format": "float,float",
          "description": "X,Y coordinates"
        },
        "observed": {
          "type": "function_expression",
          "description": "Observed flow input (data reference, constant, or expression)"
        }
      }
    }
  },

  "validation_rules": {
    "file_paths": {
      "severity": "error",
      "description": "All input file paths must exist",
      "check": "file_exists"
    },

    "output_references": {
      "severity": "error",
      "description": "Output references must point to valid node.property combinations",
      "check": "node_output_validation"
    },

    "dsnode_references": {
      "severity": "error",
      "description": "Links must point to existing nodes",
      "check": "node_exists"
    },

    "unique_node_names": {
      "severity": "error",
      "description": "Node names must be unique"
    },

    "data_reference_files": {
      "severity": "warning",
      "description": "Data references should point to files listed in inputs section"
    },

    "coordinate_format": {
      "severity": "error",
      "description": "Coordinates must be two comma-separated numbers"
    }
  },

  "data_types": {
    "number": {
      "pattern": "^-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$",
      "parse": "parse_float"
    },

    "integer": {
      "pattern": "^-?\\d+$",
      "parse": "parse_int"
    },

    "coordinates": {
      "pattern": "^-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\s*,\\s*-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$",
      "parse": "split_floats"
    },

    "number_sequence": {
      "pattern": "^-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?(?:\\s*,\\s*-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)*(?:\\s*,)?$",
      "parse": "split_floats"
    },

    "data_reference": {
      "components": ["dataset", "accessor", "field"],
      "format": "data.{dataset}.by_{accessor}.{field}"
    },

    "downstream_reference": {
      "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
      "description": "Reference to a downstream node (node name)",
      "validation": "dsnode_references"
    },

    "function_expression": {
      "description": "Mathematical expression with optional data references and functions",
      "validation": "custom_function_validator"
    }
  }
}