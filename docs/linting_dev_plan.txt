‚è∫ Implementation Plan for Kalix Model Linter

  Phase 1: Schema System Foundation

  1. Schema Infrastructure
    - LinterSchema.java - JSON schema loader and parser
    - ValidationRule.java - Individual rule representation with severity
    - SchemaManager.java - Schema lifecycle management (load, reload, validate)
    - Embedded default schema at /resources/linter/kalix-model-schema.json
  2. Preference System Integration
    - Add new preference keys to PreferenceKeys.java:
        - LINTER_ENABLED (boolean, default: true)
      - LINTER_SCHEMA_PATH (string, default: embedded)
      - LINTER_RULES_DISABLED (string array, default: empty)
    - Update PreferenceManager.java to handle schema path resolution

  Phase 2: Preferences UI

  3. New Preferences Tab
    - LinterPreferencesPanel.java - New tab in preferences window
    - Main Controls:
        - Checkbox: "Enable Model Linting"
      - File picker: "Custom Schema File" with "Use Default" option
      - "Reload Schema" button for testing custom schemas
  4. Rule-by-Rule Configuration
    - Dynamic table/list showing all rules from loaded schema
    - Columns: Rule Name, Description, Severity, Enabled (checkbox)
    - Live update when schema changes

  Phase 3: Validation Engine

  5. Core Validation System
    - ModelLinter.java - Main validation coordinator
    - ValidationEngine.java - Executes validation rules
    - ValidationResult.java - Contains errors/warnings with line numbers
    - INIModelParser.java - Parse INI into structured sections
  6. Incremental Validation
    - IncrementalValidator.java - Track dirty sections
    - Document change listener to identify modified lines/sections
    - Cache validation results for unchanged sections

  Phase 4: Editor Integration

  7. Text Editor Enhancement
    - Extend your existing EnhancedTextEditor with linting capability
    - LinterDocumentListener.java - Debounced validation trigger (300ms)
    - Background validation thread to avoid UI blocking
  8. Visual Feedback System
    - LinterHighlighter.java - Manage RSyntaxTextArea underlines
    - Custom ErrorPainter for different severity levels (red/orange underlines)
    - Tooltip integration showing error messages on hover
    - Gutter icons for line-level indicators

  Phase 5: Performance & Polish

  9. Performance Optimizations
    - File existence cache (5-second TTL)
    - Regex pattern pre-compilation
    - Section-level validation granularity
    - Configurable validation delay
  10. User Experience
    - Status bar integration showing validation state
    - Error panel/sidebar (optional, preferences-controlled)
    - Keyboard shortcuts (F8 for next error)
    - Integration with existing manager pattern architecture

  Implementation Order:

  1. Start with schema system - Foundation for everything else
  2. Add preferences UI - User can configure before validation begins
  3. Build validation engine - Core logic independent of UI
  4. Integrate with editor - Connect validation to text editing
  5. Add visual feedback - Make validation results visible
  6. Optimize performance - Polish for real-time use

  Key Integration Points:

  - PreferenceManager: Store linter settings in existing system
  - EnhancedTextEditor: Extend with linting via manager pattern
  - Manager Architecture: LinterManager.java following existing patterns
  - Theme System: Linter colors respect current theme
