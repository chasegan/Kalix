Kalix Java Swing GUI - Initial Development Plan
================================================

This folder is for a new Java Swing GUI program for a hydrologic modelling platform named Kalix. The Kalix simulation engine is a separate project being developed elsewhere as a CLI using rust. Kalix models are saved in text formats (including JSON and INI). Nodes consist of conceptual nodes (which implement hydrologic functionality) connected by links. The current Java GUI will provide an interface comprising two main components: 1) A map-like panel that displays kalix hydrologic models as nodes (represented by colored circles) connected by links (represented by lines), and 2) a text editor allowing users to directly edit the model representations (e.g. JSON or INI).

PHASED DEVELOPMENT PLAN:

Phase 1-3: Foundation & Core Visualization
==========================================
Goal: Basic application with node visualization

Phase 1: Project setup and basic application structure
- Set up Maven/Gradle project structure with Swing dependencies
- Create main application window with split-pane layout (map panel + text editor)

Phase 2: Implement basic map-like panel with simple graphics
- Implement custom JPanel for map view with basic graphics rendering

Phase 3: Add node rendering (colored circles)
- Add Node class and render nodes as colored circles with basic positioning

Phase 4-5: Links & Text Editing
===============================
Goal: Complete basic visualization + editing capability

Phase 4: Add link rendering (lines between nodes)
- Add Link class and render connections as lines between nodes

Phase 5: Implement basic text editor panel
- Implement text editor panel using JTextArea with syntax highlighting (consider RSyntaxTextArea)
- Add basic file menu (New, Open, Save, Exit)

Phase 6-8: Data Integration
===========================
Goal: Working model representation and synchronization

Phase 6: Create data model for Kalix models (nodes and links)
- Create KalixModel class to represent nodes and links data structure

Phase 7: Add basic file I/O for JSON/INI model formats
- Add JSON/INI parsers to load/save model files

Phase 8: Synchronize map panel and text editor views
- Implement bidirectional sync between map view and text editor
- Add model validation and error handling

Phase 9-10: User Experience
===========================
Goal: Interactive, polished interface

Phase 9: Add basic mouse interaction (pan, zoom, select)
- Add mouse interactions: pan, zoom, node selection
- Implement node dragging and basic editing

Phase 10: Polish UI layout and add menu system
- Polish layout, add toolbar, status bar, and keyboard shortcuts

IMPLEMENTATION NOTES:
====================
Each phase builds incrementally, allowing you to have a working application early while adding complexity gradually. The phases are designed to maintain a functional application at each step while progressively adding features.

Key Technologies to Consider:
- Build System: Maven or Gradle
- Text Editor: RSyntaxTextArea for syntax highlighting
- JSON Parsing: Jackson or Gson
- INI Parsing: ini4j or custom parser
- Graphics: Java2D for custom rendering